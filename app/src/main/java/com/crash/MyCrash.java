package com.crash;



/*
    行百里者 半九十
    1. crash

        1） UV PV crash率
        2）Java Native crash 率

        3）启动 重点流程 crash率


        4）增量和存量 crash率
            增量crash是新版本新加出来的crash
            存量是老版本自有的crash 是需要持续啃得硬骨头
            优先解决增量 持续跟进存量crash


    2. 移动端容灾方案
       灾：性能 业务异常

       1） 功能开关
            上线的新功能加一个开关，服务器配置中心 下发配置控制  场景：新加代码 或者代码改动

       2） 动态化修复
            热修复能力， 可监控 灰度 回滚 清除
            推拉结合 多场景调用保证到达率
            Weex RN增量更新

       3） 安全模式
            根据crash信息自动恢复，多次启动失败 重置APP到最初安装的状态
            严重bug可阻塞性热修复
            异常熔断： 多次请求失败则主动拒绝


     3. 稳定性长效治理
        1）全流程crash长效治理
            统一编码规范，增强编码功底，技术评审，CodeReview机制等
            架构优化：能力收敛，统一容错

            合码阶段： 编译检查 静态代码扫描


     4. 做了哪些稳定性方面的优化
            crash专项优化
            性能稳定性优化
            业务稳定性优化

     5. 性能稳定性是怎么做的的？
        以线下发现问题 解决问题为主
        线上以监控为主
        同时有做crash专项优化

     6. 业务稳定性如何保障？
        数据采集+ 报警
        异常监控+ 单点追查
        兜底策略
    7、

 */

public class MyCrash {
}
